/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Tue May 08 2018 09:09:27 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of fixer.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin fixer.
     * @constructor
     */
    var fixer = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    fixer.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    fixer.prototype = Object.create(PluginBase.prototype);
    fixer.prototype.constructor = fixer;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    fixer.prototype.main = function (callback) {
        var self = this,
            config = this.getCurrentConfig(),
            needCommit = false;

        if (config.srcOrDstSet) {
            needCommit = needCommit || this.srcOrDstSets(config.dry);
        }

        if (needCommit) {
            this.save('Fixes made on the project.', function (err, status) {
                if (err) {
                    callback(err, self.result);
                    return;
                }

                self.logger.info('saved returned with status', status);
                self.result.setSuccess(true);
                callback(null, self.result);
            });
        } else {
            this.result.setSuccess(true);
            callback(null, this.result);
        }

    };

    fixer.prototype.srcOrDstSets = function (dry) {
        var self = this,
            core = self.core,
            root = core.getRoot(self.activeNode),
            metaNodes = core.getAllMetaNodes(root),
            log = self.logger.info,
            madeChanges = false,
            names, path, i, metaInfo, target;

        for (path in metaNodes) {
            names = core.getOwnValidSetNames(metaNodes[path]);
            for (i = 0; i < names.length; i += 1) {
                metaInfo = core.getPointerMeta(metaNodes[path], names[i]);
                if ((names[i] === 'dst' || names[i] === 'src') && metaInfo.max !== 1) {
                    self.createMessage(metaNodes[path], 'wrong cardinality for relation \'' + names[i] + '\'');
                    if (!dry) {
                        core.setPointerMetaLimits(metaNodes[path], names[i], 0, 1);
                        madeChanges = true;
                        for (target in metaInfo) {
                            if (target !== 'min' && target !== 'max') {
                                core.setPointerMetaTarget(metaNodes[path], names[i], metaNodes[target], 0, 1);
                            }
                        }
                    }
                }
            }
        }

        return madeChanges;
    };

    return fixer;
});
